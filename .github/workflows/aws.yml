name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set yml files
        uses: microsoft/variable-substitution@v1
        with:
          files: ./src/main/resources/application.yml
        env:
          spring.datasource.url: ${{ secrets.RDS_HOST }}
          spring.datasource.username: ${{ secrets.RDS_USERNAME }}
          spring.datasource.password: ${{ secrets.RDS_PASSWORD }}
          jwt.key: ${{ secrets.JWT_KEY }}
          aws.access.key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws.secret.key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          product.bucket.name: ${{ secrets.PRODUCT_BUCKET_NAME }}
          review.bucket.name: ${{ secrets.REVIEW_BUCKET_NAME }}
          elk.server: ${{ secrets.ELK_SERVER }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew clean build -x test

        # Docker 이미지 빌드
      - name: docker image build
        run: docker buildx build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME }}/review .

      # DockerHub 로그인
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Docker Hub 이미지 푸시
      - name: docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/review

      #CD

      - name: Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script: |
            sudo docker stop $(sudo docker ps -q --filter ancestor=jw059/review)
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/review
            sudo docker run --platform linux/amd64 -d -p 8085:8085 ${{ secrets.DOCKERHUB_USERNAME }}/review
            sudo docker image prune -f
